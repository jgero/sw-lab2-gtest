# Diese Datei wird von den Makefiles in den Unterverzeichnissen benutzt.
# Sie ist f√ºr ctc angepasst
CXX := g++
CXXCTC := ctc -i m g++
LINK=ctc g++
CPPFLAGS = -g -Wall -Wextra -pthread -pedantic -fmax-errors=1
#CPPFLAGS += -std=c++14 
# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /home/me/programme/gtest
TEST = dertest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h
GTEST = $(GTEST_DIR)/lib/gtest
GTESTALL = $(GTEST_DIR)/lib/gtest-all
GTESTMAIN = $(GTEST_DIR)/lib/gtest_main
# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

SOURCES := $(wildcard *.cpp)
GCDAS := $(wildcard *.gcda)
HEADERS := $(wildcard *.h)
OBJS := $(patsubst %.cpp,%.o,$(wildcard *.cpp))
TEMPLATES := $(wildcard *.t)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.


# House-keeping build targets.

all : $(TEST)

clean :
	rm -f $(TEST) *.o $(GTEST_DIR)/lib/*  MON.sym MON.dat execprofile.txt untestedcode.txt
	rm -rf CTCHTML


# Builds gtest.a and gtest_main.a.

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(GTESTALL).o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $(GTESTALL).o

$(GTESTMAIN).o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $(GTESTMAIN).o

$(GTESTALL).a : $(GTESTALL).o
	$(AR) $(ARFLAGS) $@ $^

$(GTESTMAIN).a : $(GTESTALL).o $(GTESTMAIN).o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TEST) : $(OBJS) $(GTEST_DIR)/lib/gtest_main.a
	-$(LINK) $(LDFLAGS) -lpthread $^ -o $(TEST)

$(OBJS): $(SOURCES) $(HEADERS) $(TEMPLATES) $(GTEST_HEADERS)
	$(CXXCTC) $(CPPFLAGS) $(INCLUDE) -c $(SOURCES)

run: $(TEST)
	-./$(TEST)
	ctcpost MON.sym MON.dat $(COVERAGE) -p execprofile.txt
	ctcpost MON.sym MON.dat -u untestedcode.txt
	ctc2html -i execprofile.txt



